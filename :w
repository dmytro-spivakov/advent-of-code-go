package day12

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

type Row struct {
	rawSeq        []string
	damagedGroups []int
}

func Solution1(filepath string) int {
	m := parseInput(filepath)
	printMatrix(m)
	return -1
}

func Solution2(filepath string) int {
	return -1
}

func parseInput(filepath string) []Row {
	file, err := os.Open(filepath)
	if err != nil {
		log.Fatalf("Failed to open the input file with: %v\n", err.Error())
	}

	var m []Row
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		divInput := strings.Split(scanner.Text(), " ")
		seq := strings.Split(divInput[0], "")
		dmgGroups := strings.Split(divInput[1], ",")
		m = append(m, Row{rawSeq: seq, damagedGroups: parseInts(dmgGroups)})
	}
	if err = scanner.Err(); err != nil {
		log.Fatalf("Error during input file read: %v\n", err.Error())
	}

	return m
}

func printRows(rows []Row) {
	fmt.Println("-----MATRIX START-----")
	for _, row := range rows {
		fmt.Println(row)
	}
	fmt.Println("------MATRIX END-----")
}

func parseInts(sNums []string) []int {
	var nums []int
	for _, sNum := range sNums {
		num64, err := strconv.ParseInt(sNum, 10, 64)
		if err != nil {
			log.Fatalf("Failed to parse number %v with: %v\n", sNum, err.Error())
		}

		nums = append(nums, int(num64))
	}

	return nums
}
